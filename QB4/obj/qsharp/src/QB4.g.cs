//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QuantumSample.QB4\",\"Name\":\"QB4Run\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\30 Hacks\\\\medqbiterspatientsapi\\\\QB4\\\\QB4.qs\",\"Position\":{\"Item1\":6,\"Item2\":1},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bitZero\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":19},\"Item2\":{\"Line\":1,\"Column\":26}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bitOne\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":34},\"Item2\":{\"Line\":1,\"Column\":40}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bitTwo\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":47},\"Item2\":{\"Line\":1,\"Column\":53}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bitThree\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":60},\"Item2\":{\"Line\":1,\"Column\":68}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bitFour\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":75},\"Item2\":{\"Line\":1,\"Column\":82}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"String\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QuantumSample.QB4\",\"Name\":\"QB4Run\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\30 Hacks\\\\medqbiterspatientsapi\\\\QB4\\\\QB4.qs\",\"Position\":{\"Item1\":6,\"Item2\":1},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"QuantumSample.QB4\",\"Name\":\"Set\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\30 Hacks\\\\medqbiterspatientsapi\\\\QB4\\\\QB4.qs\",\"Position\":{\"Item1\":116,\"Item2\":1},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":14}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"desired\"]},\"Type\":{\"Case\":\"Result\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":16},\"Item2\":{\"Line\":1,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"q1\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":33},\"Item2\":{\"Line\":1,\"Column\":35}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Result\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"QuantumSample.QB4\",\"Name\":\"Set\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\30 Hacks\\\\medqbiterspatientsapi\\\\QB4\\\\QB4.qs\",\"Position\":{\"Item1\":116,\"Item2\":1},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":14}},\"Documentation\":[]}")]
#line hidden
namespace QuantumSample.QB4
{
    [SourceLocation("D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs", OperationFunctor.Body, 7, 117)]
    public partial class QB4Run : Operation<(Int64,Int64,Int64,Int64,Int64), String>, ICallable
    {
        public QB4Run(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64,Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64,Int64,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "QB4Run";
        String ICallable.FullName => "QuantumSample.QB4.QB4Run";
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<(Result,Qubit), QVoid> Set
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> M
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message
        {
            get;
            set;
        }

        protected ICallable<Double, String> MicrosoftQuantumConvertDoubleAsString
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> MicrosoftQuantumConvertIntAsDouble
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64,Int64,Int64), String> Body => (__in__) =>
        {
            var (bitZero,bitOne,bitTwo,bitThree,bitFour) = __in__;
#line 9 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
            var probability = 0L;
#line 10 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
            var bit0 = bitZero;
#line 11 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
            var bit1 = bitOne;
#line 12 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
            var bit2 = bitTwo;
#line 13 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
            var bit3 = bitThree;
#line 14 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
            var bit4 = bitFour;
#line hidden
            {
#line 15 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                var qubits = Allocate.Apply(5L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 17 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                    foreach (var test in new QRange(1L, 10000L))
#line hidden
                    {
#line 19 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        Set.Apply((Result.Zero, qubits[0L]));
#line 20 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        Set.Apply((Result.Zero, qubits[1L]));
#line 21 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        Set.Apply((Result.Zero, qubits[2L]));
#line 22 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        Set.Apply((Result.Zero, qubits[3L]));
#line 23 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        Set.Apply((Result.Zero, qubits[4L]));
#line 24 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        MicrosoftQuantumIntrinsicH.Apply(qubits[0L]);
#line 25 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        MicrosoftQuantumIntrinsicH.Apply(qubits[1L]);
#line 26 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        var heartRateMeasure = M.Apply(qubits[1L]);
#line 27 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if ((heartRateMeasure == Result.One))
                        {
#line 28 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            MicrosoftQuantumIntrinsicH.Apply(qubits[2L]);
                        }

#line 30 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        MicrosoftQuantumIntrinsicH.Apply(qubits[3L]);
#line 31 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        var respiratoryRateMeasure = M.Apply(qubits[3L]);
#line 32 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if ((respiratoryRateMeasure == Result.One))
                        {
#line 33 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            MicrosoftQuantumIntrinsicH.Apply(qubits[4L]);
                        }

#line 35 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        var res0 = M.Apply(qubits[0L]);
#line 36 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        var res1 = M.Apply(qubits[1L]);
#line 37 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        var res2 = M.Apply(qubits[2L]);
#line 38 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        var res3 = M.Apply(qubits[3L]);
#line 39 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        var res4 = M.Apply(qubits[4L]);
#line 40 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.Zero) && (res3 == Result.Zero)) && (res2 == Result.Zero)) && (res1 == Result.Zero)) && (res0 == Result.Zero)) && (bit4 == 0L)) && (bit3 == 0L)) && (bit2 == 0L)) && (bit1 == 0L)) && (bit0 == 0L)))
                        {
#line 41 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }

#line 42 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.Zero) && (res3 == Result.Zero)) && (res2 == Result.Zero)) && (res1 == Result.Zero)) && (res0 == Result.One)) && (bit4 == 0L)) && (bit3 == 0L)) && (bit2 == 0L)) && (bit1 == 0L)) && (bit0 == 1L)))
                        {
#line 43 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }

#line 44 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.Zero) && (res3 == Result.Zero)) && (res2 == Result.Zero)) && (res1 == Result.One)) && (res0 == Result.Zero)) && (bit4 == 0L)) && (bit3 == 0L)) && (bit2 == 0L)) && (bit1 == 1L)) && (bit0 == 0L)))
                        {
#line 45 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }

#line 46 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.Zero) && (res3 == Result.Zero)) && (res2 == Result.Zero)) && (res1 == Result.One)) && (res0 == Result.One)) && (bit4 == 0L)) && (bit3 == 0L)) && (bit2 == 0L)) && (bit1 == 1L)) && (bit0 == 1L)))
                        {
#line 47 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }

#line 49 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.Zero) && (res3 == Result.Zero)) && (res2 == Result.One)) && (res1 == Result.One)) && (res0 == Result.Zero)) && (bit4 == 0L)) && (bit3 == 0L)) && (bit2 == 1L)) && (bit1 == 1L)) && (bit0 == 0L)))
                        {
#line 50 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }

#line 51 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.Zero) && (res3 == Result.Zero)) && (res2 == Result.One)) && (res1 == Result.One)) && (res0 == Result.One)) && (bit4 == 0L)) && (bit3 == 0L)) && (bit2 == 1L)) && (bit1 == 1L)) && (bit0 == 1L)))
                        {
#line 52 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }

#line 54 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.Zero) && (res3 == Result.One)) && (res2 == Result.Zero)) && (res1 == Result.Zero)) && (res0 == Result.Zero)) && (bit4 == 0L)) && (bit3 == 1L)) && (bit2 == 0L)) && (bit1 == 0L)) && (bit0 == 0L)))
                        {
#line 55 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }

#line 57 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.Zero) && (res3 == Result.One)) && (res2 == Result.Zero)) && (res1 == Result.Zero)) && (res0 == Result.One)) && (bit4 == 0L)) && (bit3 == 1L)) && (bit2 == 0L)) && (bit1 == 0L)) && (bit0 == 1L)))
                        {
#line 58 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }

#line 60 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.Zero) && (res3 == Result.One)) && (res2 == Result.Zero)) && (res1 == Result.One)) && (res0 == Result.Zero)) && (bit4 == 0L)) && (bit3 == 1L)) && (bit2 == 0L)) && (bit1 == 1L)) && (bit0 == 0L)))
                        {
#line 61 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }

#line 63 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.Zero) && (res3 == Result.One)) && (res2 == Result.Zero)) && (res1 == Result.One)) && (res0 == Result.One)) && (bit4 == 0L)) && (bit3 == 1L)) && (bit2 == 0L)) && (bit1 == 1L)) && (bit0 == 1L)))
                        {
#line 64 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }

#line 66 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.Zero) && (res3 == Result.One)) && (res2 == Result.One)) && (res1 == Result.One)) && (res0 == Result.Zero)) && (bit4 == 0L)) && (bit3 == 1L)) && (bit2 == 1L)) && (bit1 == 1L)) && (bit0 == 0L)))
                        {
#line 67 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }

#line 69 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.Zero) && (res3 == Result.One)) && (res2 == Result.One)) && (res1 == Result.One)) && (res0 == Result.One)) && (bit4 == 0L)) && (bit3 == 1L)) && (bit2 == 1L)) && (bit1 == 1L)) && (bit0 == 1L)))
                        {
#line 70 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }

#line 72 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.One) && (res3 == Result.One)) && (res2 == Result.Zero)) && (res1 == Result.Zero)) && (res0 == Result.Zero)) && (bit4 == 1L)) && (bit3 == 1L)) && (bit2 == 0L)) && (bit1 == 0L)) && (bit0 == 0L)))
                        {
#line 73 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }

#line 75 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.One) && (res3 == Result.One)) && (res2 == Result.Zero)) && (res1 == Result.Zero)) && (res0 == Result.One)) && (bit4 == 1L)) && (bit3 == 1L)) && (bit2 == 0L)) && (bit1 == 0L)) && (bit0 == 1L)))
                        {
#line 76 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }

#line 78 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.One) && (res3 == Result.One)) && (res2 == Result.Zero)) && (res1 == Result.One)) && (res0 == Result.Zero)) && (bit4 == 1L)) && (bit3 == 1L)) && (bit2 == 0L)) && (bit1 == 1L)) && (bit0 == 0L)))
                        {
#line 79 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }

#line 81 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.One) && (res3 == Result.One)) && (res2 == Result.Zero)) && (res1 == Result.One)) && (res0 == Result.One)) && (bit4 == 1L)) && (bit3 == 1L)) && (bit2 == 0L)) && (bit1 == 1L)) && (bit0 == 1L)))
                        {
#line 82 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }

#line 84 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.One) && (res3 == Result.One)) && (res2 == Result.One)) && (res1 == Result.One)) && (res0 == Result.Zero)) && (bit4 == 1L)) && (bit3 == 1L)) && (bit2 == 1L)) && (bit1 == 1L)) && (bit0 == 0L)))
                        {
#line 85 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }

#line 86 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                        if (((((((((((res4 == Result.One) && (res3 == Result.One)) && (res2 == Result.One)) && (res1 == Result.One)) && (res0 == Result.One)) && (bit4 == 1L)) && (bit3 == 1L)) && (bit2 == 1L)) && (bit1 == 1L)) && (bit0 == 1L)))
                        {
#line 87 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                            probability = (probability + 1L);
                        }
                    }

#line 89 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                    Set.Apply((Result.Zero, qubits[0L]));
#line 90 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                    Set.Apply((Result.Zero, qubits[1L]));
#line 91 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                    Set.Apply((Result.Zero, qubits[2L]));
#line 92 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                    Set.Apply((Result.Zero, qubits[3L]));
#line 93 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                    Set.Apply((Result.Zero, qubits[4L]));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(qubits);
                    }
                }
            }

#line 95 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
            probability = (probability / 100L);
#line 96 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
            if (((probability >= 1L) && (probability <= 4L)))
            {
#line 97 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                Message.Apply((((((("Priority -> " + MicrosoftQuantumConvertDoubleAsString.Apply(MicrosoftQuantumConvertIntAsDouble.Apply(bit4))) + MicrosoftQuantumConvertDoubleAsString.Apply(MicrosoftQuantumConvertIntAsDouble.Apply(bit3))) + MicrosoftQuantumConvertDoubleAsString.Apply(MicrosoftQuantumConvertIntAsDouble.Apply(bit2))) + MicrosoftQuantumConvertDoubleAsString.Apply(MicrosoftQuantumConvertIntAsDouble.Apply(bit1))) + MicrosoftQuantumConvertDoubleAsString.Apply(MicrosoftQuantumConvertIntAsDouble.Apply(bit0))) + " -> P1"));
#line 98 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                return "P1";
            }

#line 101 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
            if (((probability >= 5L) && (probability <= 10L)))
            {
#line 102 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                Message.Apply((((((("Priority -> " + MicrosoftQuantumConvertDoubleAsString.Apply(MicrosoftQuantumConvertIntAsDouble.Apply(bit4))) + MicrosoftQuantumConvertDoubleAsString.Apply(MicrosoftQuantumConvertIntAsDouble.Apply(bit3))) + MicrosoftQuantumConvertDoubleAsString.Apply(MicrosoftQuantumConvertIntAsDouble.Apply(bit2))) + MicrosoftQuantumConvertDoubleAsString.Apply(MicrosoftQuantumConvertIntAsDouble.Apply(bit1))) + MicrosoftQuantumConvertDoubleAsString.Apply(MicrosoftQuantumConvertIntAsDouble.Apply(bit0))) + " ->  P2"));
#line 103 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                return "P2";
            }

#line 106 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
            if (((probability >= 11L) && (probability <= 15L)))
            {
#line 107 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                Message.Apply((((((("Priority -> " + MicrosoftQuantumConvertDoubleAsString.Apply(MicrosoftQuantumConvertIntAsDouble.Apply(bit4))) + MicrosoftQuantumConvertDoubleAsString.Apply(MicrosoftQuantumConvertIntAsDouble.Apply(bit3))) + MicrosoftQuantumConvertDoubleAsString.Apply(MicrosoftQuantumConvertIntAsDouble.Apply(bit2))) + MicrosoftQuantumConvertDoubleAsString.Apply(MicrosoftQuantumConvertIntAsDouble.Apply(bit1))) + MicrosoftQuantumConvertDoubleAsString.Apply(MicrosoftQuantumConvertIntAsDouble.Apply(bit0))) + " ->  P3"));
#line 108 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                return "P3";
            }

#line 110 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
            if (((probability < 1L) || (probability > 15L)))
            {
#line 111 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                Message.Apply("Priority -> Invalid");
#line 112 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                return "NA";
            }

#line 115 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
            return "NA";
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.Set = this.Factory.Get<ICallable<(Result,Qubit), QVoid>>(typeof(Set));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.M = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Intrinsic.M));
            this.Message = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.MicrosoftQuantumConvertDoubleAsString = this.Factory.Get<ICallable<Double, String>>(typeof(Microsoft.Quantum.Convert.DoubleAsString));
            this.MicrosoftQuantumConvertIntAsDouble = this.Factory.Get<ICallable<Int64, Double>>(typeof(Microsoft.Quantum.Convert.IntAsDouble));
        }

        public override IApplyData __dataIn((Int64,Int64,Int64,Int64,Int64) data) => new In(data);
        public override IApplyData __dataOut(String data) => new QTuple<String>(data);
        public static System.Threading.Tasks.Task<String> Run(IOperationFactory __m__, Int64 bitZero, Int64 bitOne, Int64 bitTwo, Int64 bitThree, Int64 bitFour)
        {
            return __m__.Run<QB4Run, (Int64,Int64,Int64,Int64,Int64), String>((bitZero, bitOne, bitTwo, bitThree, bitFour));
        }
    }

    [SourceLocation("D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs", OperationFunctor.Body, 117, -1)]
    public partial class Set : Operation<(Result,Qubit), QVoid>, ICallable
    {
        public Set(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Result,Qubit)>, IApplyData
        {
            public In((Result,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    yield return Data.Item2;
                }
            }
        }

        String ICallable.Name => "Set";
        String ICallable.FullName => "QuantumSample.QB4.Set";
        protected ICallable<Qubit, Result> M
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        public override Func<(Result,Qubit), QVoid> Body => (__in__) =>
        {
            var (desired,q1) = __in__;
#line 119 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
            var current = M.Apply(q1);
#line 120 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
            if ((desired != current))
            {
#line 122 "D:\\30 Hacks\\medqbiterspatientsapi\\QB4\\QB4.qs"
                MicrosoftQuantumIntrinsicX.Apply(q1);
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.M = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Intrinsic.M));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __dataIn((Result,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Result desired, Qubit q1)
        {
            return __m__.Run<Set, (Result,Qubit), QVoid>((desired, q1));
        }
    }
}